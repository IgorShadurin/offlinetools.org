name: Release App

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/release.yml'
  pull_request:
    types: [closed]
    branches:
      - master
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        default: '1.0.0'

permissions:
  contents: write
  pull-requests: write

jobs:
  # This job will only run for PR events
  check-release-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    outputs:
      is_release_pr: ${{ steps.check.outputs.is_release_pr }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Check if release PR
        id: check
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          
          if [[ "$PR_BRANCH" == *"release-please"* ]] || [[ "$PR_TITLE" == *"release"* ]]; then
            echo "is_release_pr=true" >> $GITHUB_OUTPUT
            VERSION=$(echo "$PR_TITLE" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "1.0.0")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "This is a release PR with version $VERSION"
          else
            echo "is_release_pr=false" >> $GITHUB_OUTPUT
            echo "This is not a release PR"
          fi

  # This job will run for push events and manual triggers
  determine-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      release_created: ${{ steps.release_please.outputs.release_created || steps.manual_version.outputs.release_created }}
      tag_name: ${{ steps.release_please.outputs.tag_name || steps.manual_version.outputs.tag_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Release Please
        id: release_please
        if: github.event_name == 'push'
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          skip-labeling: true
          skip-github-release: false

      - name: Set manual version
        id: manual_version
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_created=true" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
          echo "Manually triggered release for version $VERSION"

      - name: Get final version
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ steps.release_please.outputs.release_created }}" == "true" ]]; then
              MAJOR="${{ steps.release_please.outputs.major }}"
              MINOR="${{ steps.release_please.outputs.minor }}"
              PATCH="${{ steps.release_please.outputs.patch }}"
              VERSION="${MAJOR}.${MINOR}.${PATCH}"
            else
              VERSION="0.0.0"  # Default if no release was created
            fi
          else
            VERSION="0.0.0"  # Default fallback
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

  # This decision job determines if we should build and release
  should-build-release:
    runs-on: ubuntu-latest
    needs: [check-release-pr, determine-version]
    if: always()
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Check build conditions
        id: check
        run: |
          # Default to not building
          echo "should_build=false" >> $GITHUB_OUTPUT
          
          # For manual trigger, always build
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "version=${{ needs.determine-version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "Manual trigger - will build version ${{ needs.determine-version.outputs.version }}"
            exit 0
          fi
          
          # For push event with release created by release-please
          if [[ "${{ github.event_name }}" == "push" && "${{ needs.determine-version.outputs.release_created }}" == "true" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "version=${{ needs.determine-version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "Release created by release-please - will build version ${{ needs.determine-version.outputs.version }}"
            exit 0
          fi
          
          # For PR event with release PR
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ needs.check-release-pr.outputs.is_release_pr }}" == "true" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "version=${{ needs.check-release-pr.outputs.version }}" >> $GITHUB_OUTPUT
            echo "Release PR merged - will build version ${{ needs.check-release-pr.outputs.version }}"
            exit 0
          fi
          
          echo "No conditions met for building - skipping build"

  manual-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ github.event.inputs.version }}
    steps:
      - name: Set up version
        run: |
          echo "Building version ${{ github.event.inputs.version }}"

  build-platforms:
    needs: [manual-release]
    if: github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd desktop
          pnpm install

      - name: Update version in package.json (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd desktop
          VERSION="${{ needs.manual-release.outputs.version }}"
          node -e "const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('package.json'));pkg.version='$VERSION';fs.writeFileSync('package.json',JSON.stringify(pkg,null,2))"

      - name: Update version in package.json (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          cd desktop
          $VERSION = "${{ needs.manual-release.outputs.version }}"
          $pkgContent = Get-Content -Path package.json -Raw | ConvertFrom-Json
          $pkgContent.version = $VERSION
          $pkgContent | ConvertTo-Json -Depth 100 | Set-Content -Path package.json

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          # Try best-effort to install dependencies, don't fail if some are missing
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev || \
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev || true
          
          # Install other dependencies, continue even if some fail
          sudo apt-get install -y libnss3 libxss1 || true

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        env:
          # These would normally be secrets in your repository
          # For testing, we're setting them as empty which will skip actual signing
          CSC_LINK: ${{ secrets.MAC_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd desktop
          
          # Check if we have valid signing credentials
          if [ -n "$CSC_LINK" ] && [ -n "$APPLE_ID" ]; then
            echo "Building with code signing and notarization"
            # Build with notarization
            pnpm run build -- --mac --x64 --arm64 -c.mac.notarize=true
          else
            echo "Building without code signing (ad-hoc signing only)"
            # Build without notarization for development/testing
            pnpm run build -- --mac --x64 --arm64
          fi

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd desktop
          pnpm run build -- --win

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd desktop
          pnpm run build -- --linux || true

      - name: Create distributable directory
        run: mkdir -p dist-packages

      - name: Collect macOS packages
        if: matrix.os == 'macos-latest'
        run: |
          VERSION="${{ needs.manual-release.outputs.version }}"
          # Only copy the main distributable files
          find desktop/release/$VERSION -type f -name "OfflineTools_*.dmg" -exec cp {} dist-packages/ \;
          # Include latest-mac.yml for auto-updates
          find desktop/release/$VERSION -type f -name "latest-mac.yml" -exec cp {} dist-packages/ \;
          
          # List found packages
          echo "Found macOS packages:"
          ls -la dist-packages/

      - name: Collect Windows packages
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $VERSION = "${{ needs.manual-release.outputs.version }}"
          
          # Only copy the main distributable files and update metadata
          Get-ChildItem -Path "desktop/release/$VERSION" -Recurse -Include "OfflineTools*.exe" | Copy-Item -Destination "dist-packages" -Force
          Get-ChildItem -Path "desktop/release/$VERSION" -Recurse -Include "latest.yml" | Copy-Item -Destination "dist-packages" -Force
          
          # List found packages
          echo "Found Windows packages:"
          Get-ChildItem -Path "dist-packages"

      - name: Collect Linux packages
        if: matrix.os == 'ubuntu-latest'
        run: |
          VERSION="${{ needs.manual-release.outputs.version }}"
          
          # Only copy the main distributable files
          find desktop/release/$VERSION -type f -name "OfflineTools*.AppImage" -exec cp {} dist-packages/ \;
          find desktop/release/$VERSION -type f -name "OfflineTools*.deb" -exec cp {} dist-packages/ \;
          find desktop/release/$VERSION -type f -name "OfflineTools*.rpm" -exec cp {} dist-packages/ \;
          find desktop/release/$VERSION -type f -name "OfflineTools*.snap" -exec cp {} dist-packages/ \;
          find desktop/release/$VERSION -type f -name "latest-linux.yml" -exec cp {} dist-packages/ \;
          
          # List found packages
          echo "Found Linux packages:"
          ls -la dist-packages/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: dist-packages/
          if-no-files-found: warn

  create-github-release:
    needs: [manual-release, build-platforms]
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: List artifacts
        run: |
          echo "All downloaded artifacts:"
          find release-artifacts -type f | sort

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ needs.manual-release.outputs.version }}
          name: Release v${{ needs.manual-release.outputs.version }}
          body: |
            Release version ${{ needs.manual-release.outputs.version }}
            
            This is a binary release of the desktop application for Windows, macOS, and Linux.
            
            ### Downloads
            
            **Windows:** OfflineTools.exe
            
            **macOS:**
            - Intel (x64): OfflineTools_x64.dmg
            - Apple Silicon (arm64): OfflineTools_arm64.dmg
            
            **Linux:** OfflineTools_arm64.AppImage or OfflineTools_arm64.deb
          draft: false
          generate_release_notes: true
          files: release-artifacts/**/*
          fail_on_unmatched_files: false    