name: Release App

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/release.yml'
  pull_request:
    types: [closed]
    branches:
      - master
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        default: '1.0.0'

permissions:
  contents: write
  pull-requests: write

jobs:
  check-release-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    outputs:
      is_release_pr: ${{ steps.check.outputs.is_release_pr }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Check if release PR
        id: check
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          
          if [[ "$PR_BRANCH" == *"release-please"* ]] || [[ "$PR_TITLE" == *"release"* ]]; then
            echo "is_release_pr=true" >> $GITHUB_OUTPUT
            VERSION=$(echo "$PR_TITLE" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' || echo "1.0.0")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "This is a release PR with version $VERSION"
          else
            echo "is_release_pr=false" >> $GITHUB_OUTPUT
            echo "This is not a release PR"
          fi

  release-please:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && needs.check-release-pr.outputs.is_release_pr != 'true')
    needs: [check-release-pr]
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Release Please
        id: release
        if: github.event_name != 'workflow_dispatch'
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          skip-labeling: true
          skip-github-release: false

      - name: Set release outputs for manual trigger
        if: github.event_name == 'workflow_dispatch'
        id: manual_release
        run: |
          echo "release_created=true" >> $GITHUB_OUTPUT
          VERSION="${{ github.event.inputs.version }}"
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT
          echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT

  build-and-release:
    runs-on: ubuntu-latest
    needs: release-please
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'push' && needs.release-please.outputs.release_created == 'true') || 
      (github.event_name == 'pull_request' && needs.check-release-pr.outputs.is_release_pr == 'true')
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        id: set_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.event_name }}" == "push" && "${{ needs.release-please.outputs.release_created }}" == "true" ]]; then
            VERSION="${{ needs.release-please.outputs.version }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION="${{ needs.check-release-pr.outputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building for version: $VERSION"

  build-platforms:
    needs: build-and-release
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd desktop
          pnpm install

      - name: Update version in package.json
        run: |
          cd desktop
          VERSION="${{ needs.build-and-release.outputs.version }}"
          node -e "const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('package.json'));pkg.version='$VERSION';fs.writeFileSync('package.json',JSON.stringify(pkg,null,2))"

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: |
          cd desktop
          pnpm run build -- --mac

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd desktop
          pnpm run build -- --win

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd desktop
          pnpm run build -- --linux

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: desktop/release/${{ needs.build-and-release.outputs.version }}/*

  upload-assets:
    needs: [build-and-release, build-platforms]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create or update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-and-release.outputs.version }}
          name: Release v${{ needs.build-and-release.outputs.version }}
          files: release-artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 