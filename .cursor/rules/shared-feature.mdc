---
description: 
globs: 
alwaysApply: false
---
# Shared Feature Development Guidelines

This document provides a step-by-step guide for implementing new shared features in the offlinetools project. Each shared feature should be implemented in the shared library first, then exposed through a dedicated page in the landing site.

## Step 0: Research Before Implementation using MCP or Browse abilities

Before beginning development, conduct thorough research to understand industry standards, best practices, and user expectations:

1. **Competitive Analysis**: Visit at least 10 websites/tools with similar functionality to:
   - Identify common features and options that users expect
   - Note UI/UX patterns and conventions specific to this type of tool
   - Analyze which options are considered essential vs nice-to-have
   - Determine common edge cases and error handling approaches
   - Observe performance optimizations for larger inputs/files

2. **Document Findings**: Create a brief summary of research findings, including:
   - Core features that must be implemented
   - Optional features that could be added in future iterations
   - UI/UX best practices specific to this tool type
   - Potential challenges and how other implementations address them

3. **Set Scope**: Based on research, define a clear scope for the initial implementation that:
   - Focuses on the must-have features
   - Follows established conventions for similar tools
   - Considers extensibility for future enhancements

This research phase helps ensure the feature meets user expectations and follows established patterns, leading to a more intuitive and complete implementation.

## Step 1: Implement the Core Feature in Shared Library

Create a new feature directory under `shared/src/feature-name/` with implementation:

```
shared/src/
└── feature-name/
    ├── index.ts         # Main implementation with exported functions/types
    └── index.test.ts    # Tests for the feature
```

Example paths:
- `shared/src/json-validator/index.ts`
- `shared/src/json-validator/index.test.ts`

### Implementation Guidelines:

1. Use TypeScript for all implementations
2. Include JSDoc comments for all exports (functions, interfaces, enums)
3. Export all types and enums needed by the landing page
4. For error handling, throw descriptive Error objects
5. Structure the code with a clear public API
6. Always wrap implementation in try/catch blocks with specific error messages
7. Include handling for empty/undefined inputs
8. Provide good defaults in a DEFAULT_OPTIONS constant

### Implementation Reference:
- **Pattern Reference**: `/shared/src/data-encryptor/index.ts` for complete implementation
- **Interface Pattern**: `/shared/src/json-formatter/index.ts` for options interface
- **Error Handling**: `/shared/src/text-hash-generator/index.ts` for error patterns
- **Testing Pattern**: `/shared/src/base64-codec/index.test.ts` for comprehensive tests

## Step 2: Test the Feature Implementation

Create comprehensive tests in `index.test.ts` to cover:

1. Basic functionality
2. Edge cases
3. Error handling
4. All options/configurations
5. Empty and undefined inputs
6. Unicode/special character handling

### **Testing Strategy & Requirements**

#### **CRITICAL: Feature-First Testing Approach**
**AI agents MUST follow this testing workflow to optimize development speed and resource usage:**

#### **Phase 1: Feature-Specific Testing (REQUIRED FIRST)**
1. **Create tests first** in `shared/src/{feature-name}/index.test.ts`
2. **Run ONLY the feature tests** during development:
   ```bash
   # Run specific feature tests only
   cd shared && pnpm test src/{feature-name}/index.test.ts
   
   # Examples:
   cd shared && pnpm test src/data-encryptor/index.test.ts
   cd shared && pnpm test src/json-formatter/index.test.ts
   cd shared && pnpm test src/base64-codec/index.test.ts
   ```
3. **Fix issues rapidly** by focusing only on the feature being developed
4. **Iterate quickly** with faster feedback (0.5-1s vs 10s+ for all tests)

#### **Phase 2: Full Test Suite (ONLY AFTER FEATURE TESTS PASS)**
```bash
# Run all shared tests only when feature is complete
cd shared && pnpm test
```

### **Performance Benefits of Feature-First Testing**
- **Speed**: 0.5-1s vs 10s+ (10-20x faster)
- **Resource Usage**: Lower CPU/memory consumption
- **Focus**: Immediate feedback on specific feature issues
- **Debugging**: Easier to isolate and fix problems
- **Development Flow**: Faster iteration cycles

### Test Framework

Unless otherwise specified, use Jest as the testing framework for the shared library. The project is already configured with Jest, and test files should follow Jest's conventions and assertions.

### Test Structure Reference:
- **Complete Test Pattern**: `/shared/src/data-encryptor/index.test.ts`
- **Options Testing**: `/shared/src/json-formatter/index.test.ts` 
- **Error Testing**: `/shared/src/text-hash-generator/index.test.ts`
- **Edge Case Testing**: `/shared/src/base64-codec/index.test.ts`

## Step 3: Export the Feature from Shared

Add the export to `shared/src/index.ts`:
- **Reference Pattern**: See existing exports in `/shared/src/index.ts`
- **Export Pattern**: Use `export * from './feature-name';`

## Step 3.1: Register Clipboard Detection

Each tool can advertise its clipboard capabilities through a small registration file. This keeps the detector decoupled from individual tools and avoids merge conflicts.

1. **Create a registration file**:
   Add `clipboard-registration.ts` inside your tool folder
   - **Reference**: `/shared/src/json-formatter/clipboard-registration.ts`
   - **Pattern**: Export `ClipboardToolRegistration` object and call `registerClipboardTool`

2. **Update tests**: add or adjust test cases in `clipboard-detector/index.test.ts` to ensure your tool appears when expected.

With this plugin style registration, the clipboard detector automatically includes all tools that register themselves.

## Step 4: Create a Tool Page in Landing Site

Create a new tool implementation with a client component and a server component:

### Component Structure:

1. **Client Component** at `landing/app/tools/feature-name/FeatureName.tsx`:
   - Use "use client" directive at the top
   - Import feature functions from "shared" package
   - Implement UI with all interactive functionality
   - Ensure mobile responsiveness
   - **Reference**: `/landing/app/tools/json-formatter/JsonFormatter.tsx` for complete pattern

2. **Server Component** at `landing/app/tools/feature-name/page.tsx`:
   - Import the client component
   - Export metadata for the page
   - Return the client component
   - **Reference**: `/landing/app/tools/json-formatter/page.tsx` for structure

## **Design Recommendations for Landing Components**

### **UI Component Standards (REQUIRED)**
- **Custom Components**: Always use components from `/landing/components/ui/`
- **Layout Reference**: `/landing/app/tools/data-encryptor/DataEncryptor.tsx`
- **Button Reference**: `/landing/app/tools/json-formatter/JsonFormatter.tsx` lines 150-160
- **Form Reference**: `/landing/app/tools/base64-codec/Base64Codec.tsx` input patterns

### **Component Standards**
- **Container**: Use `Container` component with `py-8 md:py-12` padding
- **Headings**: Use `SectionHeading` component for title and description
- **Buttons**: Use `Button` component with proper variants (`default`, `outline`, `ghost`)
- **Text Areas**: Use `Textarea` with `font-mono` class for code/data display
- **Labels**: Use `Label` component for form inputs
- **Alerts**: Use `Alert` component for error display with proper variants

### **Layout Patterns**
- **Two-Column**: Use `flex-wrap md:flex-nowrap` for side-by-side input/output
- **Responsive**: Each column uses `w-full md:w-1/2` for mobile-first design
- **Spacing**: Use consistent gap classes (`gap-4`, `gap-6`) for proper spacing
- **Mobile Stack**: Ensure columns stack vertically on mobile devices

### **Icon Standards**
- **Import**: From `lucide-react` package exclusively
- **Sizing**: Use `h-4 w-4` for icons in buttons, `h-5 w-5` for standalone icons
- **Positioning**: Proper spacing with text using flex layouts and gap classes

### **State Management Patterns**
- **State Reference**: `/landing/app/tools/json-formatter/JsonFormatter.tsx` for complete state management
- **Error Handling**: `/landing/app/tools/base64-codec/Base64Codec.tsx` error state patterns
- **Copy Functionality**: `/landing/app/tools/text-hash-generator/TextHashGenerator.tsx` copy implementation
- **Form Validation**: `/landing/app/tools/url-encoder/UrlEncoder.tsx` input validation patterns

## Step 4.1: Implement Explanation Card

Each tool should include a detailed explanation card that provides context, use cases, and technical details about the tool. This helps users understand the tool's purpose, capabilities, and potential applications.

### Implementation Structure

1. Create a separate component for the explanation card:
   - Path: `landing/app/tools/feature-name/FeatureNameExplanation.tsx`
   - Reference: See `landing/app/tools/file-generator/FileGeneratorExplanation.tsx` for an example

2. Import and include the explanation component in your main tool component:
   - Add it after the main tool UI with appropriate spacing (e.g., `<div className="mt-12">`)
   - Reference: See how it's imported in `landing/app/tools/file-generator/FileGenerator.tsx`

### Required Sections

The explanation card should include these standard sections:

1. **Tool Capabilities**:
   - Overview paragraph of what the tool does
   - Bulleted list of specific features and capabilities

2. **Common Use Cases**:
   - Numbered list of 5-10 real-world applications
   - Each with a bold header and descriptive paragraph

3. **Technical Details**:
   - Explanation of implementation, algorithms, or APIs
   - Performance considerations and limitations

### Design Guidelines

- Use consistent styling (`p-6 border rounded-lg bg-card text-card-foreground shadow-sm`)
- Maintain heading hierarchy (h2 for title, h3 for sections)
- Use consistent spacing between sections (`space-y-6`)
- Use appropriate list formatting (unordered for features, ordered for use cases)

## Step 5: Add the Tool to Online Tools List

Add the new tool to the list in `landing/components/online-tools-grid.tsx`:
- **Reference Pattern**: See existing entries in `/landing/components/online-tools-grid.tsx`
- **Structure**: Include title, path, and concise description

### Guidelines for Tool Descriptions:

1. **Be concise**: Keep descriptions under 100 characters when possible
2. **Focus on value**: Explain what the tool helps users accomplish
3. **Use action verbs**: Start with verbs like "Convert", "Format", "Validate", etc.
4. **Be specific**: Mention key features or options that make the tool valuable
5. **Maintain consistency**: Follow the pattern of existing tool descriptions
6. **Reference Examples**: See existing descriptions in `/landing/components/online-tools-grid.tsx`

**Consistency Requirements**:
- Use same description in `onlineTools` array and `SectionHeading` component
- **Reference**: See how JSON Formatter maintains consistent descriptions

## Step 6: Link Related Tools

For each new tool, implement related tool links to enhance navigation and discoverability. Add a "Related tool" component below the SectionHeading that links to 1-2 functionally similar or complementary tools. Use the standardized UI pattern with the LinkIcon from lucide-react and Next.js Link component. Always maintain bi-directional linking - if Tool A links to Tool B, ensure Tool B also links back to Tool A. This cross-linking creates a connected ecosystem that improves user experience, reduces navigation friction, and increases tool usage by helping users discover related functionality they might otherwise miss.

## Step 7: Add Tool to the "What's in the Box?" Section

For significant tools that provide unique value, add the tool to the "What's in the Box?" section on the main page. This increases visibility and helps users discover your tool.

### Implementation Structure

1. Locate the feature boxes component:
   - Path: `landing/app/page.tsx` 
   - Look for the section with title "🧰 What's in the Box?"
   - Reference: See existing feature items in the grid layout

2. Add a new feature item:
   - Use the `FeatureItem` component from `landing/components/feature-item.tsx`
   - Include it in the grid within the features section

### Required Properties

Each feature item should include:

1. **Title**:
   - The name of your tool (e.g., "File Generator", "JSON Formatter")

2. **Description**:
   - Concise explanation of the tool (50-70 characters ideal)
   - Focus on the primary value proposition and key capabilities

3. **Icon**:
   - Select a Font Awesome icon from the `react-icons` package
   - Import the icon in `landing/app/page.tsx` and add a mapping entry in the
     `getToolIcon` function that returns the icon component for your tool's
     title
   - Pass `icon={getToolIcon(tool.title)}` when rendering the `FeatureItem`

### Placement Guidelines

- Group related tools together in the grid layout
- Consider the logical organization of tools by function or use case
- If creating a new category of tool, consider its placement in relation to existing groups

## Error Handling Best Practices

When implementing error handling in your tool:

1. **Consistent Error Display**:
   - Display errors in an Alert component with destructive variant
   - Include both an AlertTitle ("Error") and AlertDescription (error message)
   - Clear output when an error occurs

2. **Specific Error Messages**:
   - In shared functions, throw errors with specific messages
   - Include the original error message from caught exceptions
   - Format error messages consistently (e.g., "Feature failed: detailed reason")

3. **Error State Management**:
   - Clear errors when processing successfully completes
   - Clear errors when switching modes or tabs
   - Reset error state when input changes significantly

## Final Checks

After completing all steps, follow this testing sequence:

### **Phase 1: Feature-Specific Testing**
```bash
# Test shared feature implementation
cd shared && pnpm test src/{feature-name}/index.test.ts
```

### **Phase 2: Full Testing Suite (ONLY AFTER FEATURE TESTS PASS)**
```bash
# Run all shared tests
cd shared && pnpm test

# Run all landing tests and checks
cd landing && pnpm lint && pnpm types:check
```

### **Manual Testing Requirements**
1. Ensure mobile responsiveness of the UI by testing at various breakpoints
2. Test the feature with various inputs including:
   - Normal expected input
   - Empty input
   - Very large input
   - Unicode and special characters
   - Malformed input that should trigger errors
3. Verify proper error handling and display
4. Check that all links to related tools work correctly
5. Validate that copy functionality works as expected

### **Performance Testing Benefits**
- **Feature Tests**: 0.5-1s feedback during development
- **Full Suite**: Run only when feature is complete
- **Development Speed**: 10-20x faster iteration cycles

Remember to follow the general project rules:
- Use pnpm for dependency management
- Develop components to be mobile-friendly
- Use TypeScript for strong typing
- Add comprehensive JSDoc comments
- Keep files under 400 lines (split if needed)
- Reuse UI components when possible 