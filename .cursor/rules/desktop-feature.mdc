---
description: 
globs: 
alwaysApply: false
---
# Guide for Porting Features from Landing to Desktop App

## Architecture Overview
- `/landing` - Next.js web application with feature implementations
- `/desktop` - Electron desktop application, target for new features
- `/shared` - Common utilities used by both applications

## Implementation Flow

1. **Identify the Landing Page Implementation**
   - Source feature components are in: `/landing/app/tools/{feature-name}/`
   - Example: Base64 Encoder at `/landing/app/tools/base64-codec/Base64Codec.tsx`
   - Example: JSON Formatter at `/landing/app/tools/json-formatter/JsonFormatter.tsx`

2. **Locate Shared Logic**
   - Core business logic should be in: `/shared/src/{feature-name}/`
   - Example: Base64 functions at `/shared/src/base64-codec/index.ts`
   - Example: JSON utilities at `/shared/src/json-formatter/index.ts`
   - Import in desktop using: `import { ... } from 'shared/{feature-name}'`

3. **Create Desktop Component**
   - Target path: `/desktop/src/components/{feature-name}.tsx`
   - Use desktop UI components from: `/desktop/src/components/ui/`
   - Follow existing patterns like in `/desktop/src/components/json-formatter.tsx`
   - Adapt Next.js components to match desktop styling

4. **Update Desktop App**
   - Add to tools list in `/desktop/src/App.tsx`:
     ```tsx
     const tools: Tool[] = [
       // ... existing tools
       { id: '{feature-id}', name: '{Feature Name}', icon: <IconComponent size={16} /> },
     ]
     ```
   - Add conditional rendering in the same file:
     ```tsx
     {selectedTool === '{feature-id}' ? (
       <YourComponent className="min-h-full" />
     ) : (
       // ... existing code
     )}
     ```

5. **Testing Requirements**
   - Create tests in `/desktop/test/{feature-name}.spec.ts`
   - Follow style patterns from existing tests:
     - `/desktop/test/base64.spec.ts` - Base64 encoder/decoder tests
     - `/desktop/test/json-formatter.spec.ts` - JSON formatter tests
     - `/desktop/test/url-encoder.spec.ts` - URL encoder tests
   - Important testing principles:
     - **Never use arbitrary timeouts** (e.g., `page.waitForTimeout()`)
     - Always wait for specific elements or conditions instead
     - Use `waitForVisibleElement()`, `waitForComponentTitle()`, etc.
   - Recommended test structure:
     1. Setup: Initialize Electron app
     2. Navigation: Wait for sidebar to load, then click tool
     3. Input: Test with valid and invalid inputs
     4. Verification: Wait for and verify correct output
     5. Error handling: Verify appropriate error messages
   - Use utilities from `/desktop/test/utils.ts` to handle waiting
   - Run with `pnpm run test`