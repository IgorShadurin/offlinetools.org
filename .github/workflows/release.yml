name: Release App

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/release.yml'
  pull_request:
    types: [closed]
    branches:
      - master

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.${{ steps.release.outputs.patch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          skip-labeling: true
          skip-github-release: false

  build-release-on-pr-merge:
    runs-on: ubuntu-latest
    needs: release-please
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && contains(github.head_ref, 'release-please')
    outputs:
      should_build: ${{ steps.check_release.outputs.should_build }}
      version: ${{ steps.check_release.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from branch name
        id: check_release
        run: |
          if [[ "${{ github.head_ref }}" =~ release-please--branches--master--components--desktop ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            PR_TITLE="${{ github.event.pull_request.title }}"
            VERSION=$(echo "$PR_TITLE" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Release PR detected with version $VERSION"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "Not a release PR"
          fi

  build-and-release:
    needs: [release-please, build-release-on-pr-merge]
    if: |
      (needs.release-please.outputs.release_created == 'true') || 
      (needs.build-release-on-pr-merge.outputs.should_build == 'true')
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: |
          cd desktop
          pnpm install

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2

      - name: Determine version
        id: get_version
        run: |
          if [[ "${{ needs.release-please.outputs.release_created }}" == "true" ]]; then
            VERSION="${{ needs.release-please.outputs.version }}"
          else
            VERSION="${{ needs.build-release-on-pr-merge.outputs.version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version to build: $VERSION"

      - name: Update version in package.json
        run: |
          cd desktop
          node -e "const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('package.json'));pkg.version='${{ env.VERSION }}';fs.writeFileSync('package.json',JSON.stringify(pkg,null,2))"

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: |
          cd desktop
          pnpm run build -- --mac

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          cd desktop
          pnpm run build -- --win

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd desktop
          pnpm run build -- --linux

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: desktop/release/${{ env.VERSION }}/*

  upload-assets:
    needs: [release-please, build-release-on-pr-merge, build-and-release]
    if: |
      (needs.release-please.outputs.release_created == 'true') || 
      (needs.build-release-on-pr-merge.outputs.should_build == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Determine tag name
        id: get_tag
        run: |
          if [[ "${{ needs.release-please.outputs.release_created }}" == "true" ]]; then
            TAG="${{ needs.release-please.outputs.tag_name }}"
          else
            TAG="v${{ needs.build-release-on-pr-merge.outputs.version }}"
          fi
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "Tag for release: $TAG"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: Release ${{ env.TAG }}
          files: release-artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 