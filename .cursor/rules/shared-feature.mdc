# Shared Feature Development Guidelines

This document provides a step-by-step guide for implementing new shared features in the offlinetools project. Each shared feature should be implemented in the shared library first, then exposed through a dedicated page in the landing site.

## Step 0: Research Before Implementation using MCP or Browse abilities

Before beginning development, conduct thorough research to understand industry standards, best practices, and user expectations:

1. **Competitive Analysis**: Visit at least 10 websites/tools with similar functionality to:
   - Identify common features and options that users expect
   - Note UI/UX patterns and conventions specific to this type of tool
   - Analyze which options are considered essential vs nice-to-have
   - Determine common edge cases and error handling approaches
   - Observe performance optimizations for larger inputs/files

2. **Document Findings**: Create a brief summary of research findings, including:
   - Core features that must be implemented
   - Optional features that could be added in future iterations
   - UI/UX best practices specific to this tool type
   - Potential challenges and how other implementations address them

3. **Set Scope**: Based on research, define a clear scope for the initial implementation that:
   - Focuses on the must-have features
   - Follows established conventions for similar tools
   - Considers extensibility for future enhancements

This research phase helps ensure the feature meets user expectations and follows established patterns, leading to a more intuitive and complete implementation.

## Step 1: Implement the Core Feature in Shared Library

Create a new feature directory under `shared/src/feature-name/` with implementation:

```
shared/src/
└── feature-name/
    ├── index.ts         # Main implementation with exported functions/types
    └── index.test.ts    # Tests for the feature
```

Example paths:
- `shared/src/json-validator/index.ts`
- `shared/src/json-validator/index.test.ts`

### Implementation Guidelines:

1. Use TypeScript for all implementations
2. Include JSDoc comments for all exports (functions, interfaces, enums)
3. Export all types and enums needed by the landing page
4. For error handling, throw descriptive Error objects
5. Structure the code with a clear public API
6. Always wrap implementation in try/catch blocks with specific error messages
7. Include handling for empty/undefined inputs
8. Provide good defaults in a DEFAULT_OPTIONS constant

Example implementation pattern:

```typescript
/**
 * Options for the feature
 */
export interface FeatureOptions {
  // Define options here
  optionOne: boolean;
}

/**
 * Default options for the feature
 */
export const DEFAULT_OPTIONS: FeatureOptions = {
  // Default values
  optionOne: false
};

/**
 * Main function for the feature
 * @param input - The input to process
 * @param options - Optional configuration
 * @returns The processed output
 * @throws Error if processing fails
 */
export function featureFunction(
  input: string,
  options: FeatureOptions = DEFAULT_OPTIONS
): string {
  try {
    // Handle empty input
    if (!input) return "";

    // Implementation
    return "processed result";
  } catch (error) {
    throw new Error(`Feature processing failed: ${(error as Error).message}`);
  }
}
```

## Step 2: Test the Feature Implementation

Create comprehensive tests in `index.test.ts` to cover:

1. Basic functionality
2. Edge cases
3. Error handling
4. All options/configurations
5. Empty and undefined inputs
6. Unicode/special character handling

### Test Framework

Unless otherwise specified, use Jest as the testing framework for the shared library. The project is already configured with Jest, and test files should follow Jest's conventions and assertions.

Example test structure:

```typescript
import { featureFunction, FeatureOptions } from './index';

describe('Feature Name', () => {
  describe('featureFunction', () => {
    // Test with valid inputs
    it('should correctly process valid input', () => {
      const result = featureFunction('valid input');
      expect(result).toBe('expected output');
    });

    // Test with different options
    it('should respect provided options', () => {
      const options: FeatureOptions = { optionOne: true };
      const result = featureFunction('input', options);
      expect(result).toBe('expected output with options');
    });

    // Test with empty inputs
    it('should return empty string for empty input', () => {
      expect(featureFunction('')).toBe('');
      expect(featureFunction(undefined as unknown as string)).toBe('');
    });

    // Test with special characters
    it('should handle special and unicode characters correctly', () => {
      const input = 'Special chars: &%$#@! and Unicode: こんにちは世界';
      const expected = 'expected output with special chars';
      expect(featureFunction(input)).toBe(expected);
    });

    // Test error handling
    it('should throw an error for invalid input', () => {
      expect(() => {
        featureFunction('invalid input that causes error');
      }).toThrow('Feature processing failed');
    });
  });
});
```

Run tests using: `cd shared && pnpm test`

## Step 3: Export the Feature from Shared

Add the export to `shared/src/index.ts`:

```typescript
// Existing exports...

// Export new feature
export * from './feature-name';
```

## Step 4: Create a Tool Page in Landing Site

Create a new tool implementation with a client component and a server component:

1. First, create the client component at `landing/app/tools/feature-name/FeatureName.tsx`:
   - Use the "use client" directive at the top of the file
   - Import the feature functions from "shared" package
   - Implement the user interface with all interactive functionality
   - Ensure mobile responsiveness with responsive classes

Example client component structure:

```tsx
"use client"

import { Container } from "@/components/ui/container"
import { SectionHeading } from "@/components/ui/section"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
// Import other UI components as needed
import { featureFunction, FeatureOptions } from "shared"
import { useState } from "react"
import { AlertCircle, Check, Copy } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

export default function FeatureName() {
  // State management
  const [input, setInput] = useState("")
  const [output, setOutput] = useState("")
  const [error, setError] = useState<string | null>(null)
  const [copied, setCopied] = useState(false)

  // Handle processing
  const handleProcess = () => {
    try {
      const result = featureFunction(input)
      setOutput(result)
      setError(null)
    } catch (error) {
      setError((error as Error).message)
      setOutput("")
    }
  }

  // Handle copy to clipboard
  const handleCopy = () => {
    navigator.clipboard.writeText(output)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  return (
    <>
      <Container className="py-8 md:py-12">
        <SectionHeading
          title="Feature Name"
          description="Description of what this tool does and how it helps users."
        />

        {/* UI Implementation */}
                {/* Follow the pattern of existing tools like JSON Formatter */}
                {/* Ensure responsiveness with mobile-first classes */}
      </Container>
    </>
  )
}
```

2. Then, create the server component at `landing/app/tools/feature-name/page.tsx`:
   - Import the client component
   - Export metadata for the page
   - Return the client component

Example server component structure:

```tsx
import FeatureName from "./FeatureName"

export const metadata = {
  title: "Feature Name",
  description: "Concise description of what this tool does. Keep it informative and under 160 characters for optimal SEO.",
}

export default function FeatureNamePage() {
  return <FeatureName />
}
```

Example paths:
- Client component: `landing/app/tools/json-validator/JsonValidator.tsx`
- Server component: `landing/app/tools/json-validator/page.tsx`

### UI Component Patterns

When implementing your tool's UI, follow these consistent layout patterns observed in existing tools:

1. **Two-column Layout**: Use a two-column layout with input on the left and output on the right
   - Use `flex-wrap md:flex-nowrap` for responsive behavior
   - Each column should use `w-full md:w-1/2` for responsive width

2. **Standard Sections**:
   - Section Heading: Use the SectionHeading component for title and description
   - Related Tools: Include links to related tools with the LinkIcon
   - Labels: Add clear labels for input and output areas
   - Copy Button: Add a copy button for output
   - Error Display: Use Alert component for error messages

3. **Mobile Adaptations**:
   - Stack columns vertically on mobile
   - Adapt complex UI elements (like radio buttons to dropdowns)
   - Ensure adequate spacing with responsive gap classes

4. **Consistent UI Elements**:
   - Use Textarea with font-mono class for code/text input/output
   - Use Button component for actions
   - Use consistent height classes (min-h-[250px] for textareas)
   - Add placeholders to all input fields

## Step 5: Add the Tool to Online Tools List

Add the new tool to the list in `landing/components/online-tools-grid.tsx`. Make sure to include the title, path, and a concise description that explains what the tool does:

```typescript
export const onlineTools = [
  // Existing tools...
  {
    title: "Feature Name",     // User-friendly name
    path: "/tools/feature-name", // URL path to the tool page
    description: "Clear, concise description of what this tool does and what problem it solves for users."
  },
  // Rest of tools...
]
```

### Guidelines for Tool Descriptions:

1. **Be concise**: Keep descriptions under 100 characters when possible
2. **Focus on value**: Explain what the tool helps users accomplish
3. **Use action verbs**: Start with verbs like "Convert", "Format", "Validate", etc.
4. **Be specific**: Mention key features or options that make the tool valuable
5. **Maintain consistency**: Follow the pattern of existing tool descriptions

Examples of good descriptions:
- "Format and beautify your JSON with customizable indentation options."
- "Convert text to Base64 or decode Base64 to plaintext with URL-safe option."
- "Validate XML against schemas and highlight errors with detailed reports."

The same description should be used in two places:
1. In the `onlineTools` array in `landing/components/online-tools-grid.tsx`
2. In the `SectionHeading` component of your tool's page

## Step 6: Link Related Tools

For each new tool, implement related tool links to enhance navigation and discoverability. Add a "Related tool" component below the SectionHeading that links to 1-2 functionally similar or complementary tools. Use the standardized UI pattern with the LinkIcon from lucide-react and Next.js Link component. Always maintain bi-directional linking - if Tool A links to Tool B, ensure Tool B also links back to Tool A. This cross-linking creates a connected ecosystem that improves user experience, reduces navigation friction, and increases tool usage by helping users discover related functionality they might otherwise miss.

## Error Handling Best Practices

When implementing error handling in your tool:

1. **Consistent Error Display**:
   - Display errors in an Alert component with destructive variant
   - Include both an AlertTitle ("Error") and AlertDescription (error message)
   - Clear output when an error occurs

2. **Specific Error Messages**:
   - In shared functions, throw errors with specific messages
   - Include the original error message from caught exceptions
   - Format error messages consistently (e.g., "Feature failed: detailed reason")

3. **Error State Management**:
   - Clear errors when processing successfully completes
   - Clear errors when switching modes or tabs
   - Reset error state when input changes significantly

## Final Checks

After completing all steps:

1. Run linting and type checking: `cd landing && pnpm lint && pnpm types:check`
2. Ensure mobile responsiveness of the UI by testing at various breakpoints
3. Test the feature with various inputs including:
   - Normal expected input
   - Empty input
   - Very large input
   - Unicode and special characters
   - Malformed input that should trigger errors
4. Verify proper error handling and display
5. Check that all links to related tools work correctly
6. Validate that copy functionality works as expected

Remember to follow the general project rules:
- Use pnpm for dependency management
- Develop components to be mobile-friendly
- Use TypeScript for strong typing
- Add comprehensive JSDoc comments
- Keep files under 400 lines (split if needed)
- Reuse UI components when possible 