---
description: 
globs: 
alwaysApply: false
---
# Guide for Porting Features from Landing to Desktop App

## Architecture Overview
- `/landing` - Next.js web application with feature implementations
- `/desktop` - Electron desktop application, target for new features
- `/shared` - Common utilities used by both applications

## Implementation Flow

1. **Identify the Landing Page Implementation**
   - Source feature components are in: `/landing/app/tools/{feature-name}/`
   - Example: Base64 Encoder at `/landing/app/tools/base64-codec/Base64Codec.tsx`
   - Example: JSON Formatter at `/landing/app/tools/json-formatter/JsonFormatter.tsx`

2. **Locate Shared Logic**
   - Core business logic should be in: `/shared/src/{feature-name}/`
   - Example: Base64 functions at `/shared/src/base64-codec/index.ts`
   - Example: JSON utilities at `/shared/src/json-formatter/index.ts`
   - Import in desktop using: `import { ... } from 'shared/{feature-name}'`

3. **Create Desktop Component**
   - Target path: `/desktop/src/components/{feature-name}.tsx`
   - Use desktop UI components from: `/desktop/src/components/ui/`
   - Follow existing patterns like in `/desktop/src/components/json-formatter.tsx`
   - Adapt Next.js components to match desktop styling

4. **Update Desktop App**
   - Add to tools list in `/desktop/src/App.tsx`:
     ```tsx
     const tools: Tool[] = [
       // ... existing tools
       { id: '{feature-id}', name: '{Feature Name}', icon: <IconComponent size={16} /> },
     ]
     ```
   - Add conditional rendering in the same file:
     ```tsx
     {selectedTool === '{feature-id}' ? (
       <YourComponent className="min-h-full" />
     ) : (
       // ... existing code
     )}
     ```

5. **Testing Strategy & Requirements**
   
   ### **CRITICAL: Feature-First Testing Approach**
   **AI agents MUST follow this testing workflow to optimize development speed and resource usage:**

   #### **Phase 1: Feature-Specific Testing (REQUIRED FIRST)**
   1. **Create tests first** in `/desktop/test/{feature-name}.spec.ts`
   2. **Run ONLY the feature tests** during development:
      ```bash
      # Run specific feature tests only
      pnpm run test test/{feature-name}.spec.ts
      
      # Examples:
      pnpm run test test/data-encryptor.spec.ts
      pnpm run test test/json-formatter.spec.ts
      pnpm run test test/base64.spec.ts
      ```
   3. **Fix issues rapidly** by focusing only on the feature being developed
   4. **Iterate quickly** with faster feedback (1-2s vs 30s+ for all tests)

   #### **Phase 2: Full Test Suite (ONLY AFTER FEATURE TESTS PASS)**
   ```bash
   # Run all tests only when feature is complete
   pnpm run test
   # Or for headless environments
   pnpm run test:no-screen
   ```

   ### **Testing Patterns & Structure**
   - Follow style patterns from existing tests:
     - `/desktop/test/base64.spec.ts` - Base64 encoder/decoder tests
     - `/desktop/test/json-formatter.spec.ts` - JSON formatter tests
     - `/desktop/test/url-encoder.spec.ts` - URL encoder tests
   
   ### **Important Testing Principles**
   - **Never use arbitrary timeouts** (e.g., `page.waitForTimeout()`)
   - Always wait for specific elements or conditions instead
   - Use `waitForVisibleElement()`, `waitForComponentTitle()`, etc.
   - Start with basic UI tests, then add functionality tests
   
   ### **Recommended Test Structure**
   - Follow the pattern in `/desktop/test/data-encryptor.spec.ts` for clean, focused testing
   - Start with basic navigation and UI element verification tests
   - Add functionality tests after basic tests pass
   - Use proper test isolation and error handling

   ### **Performance Benefits of Feature-First Testing**
   - **Speed**: 1-2s vs 30s+ (15-30x faster)
   - **Resource Usage**: Lower CPU/memory consumption
   - **Focus**: Immediate feedback on specific feature issues
   - **Debugging**: Easier to isolate and fix problems
   - **Development Flow**: Faster iteration cycles

   ### **Test Utilities**
   - Use utilities from `/desktop/test/utils.ts` to handle waiting
   - Available commands:
     - `pnpm run test` - Run all tests
     - `pnpm run test test/specific-file.spec.ts` - Run specific test file
     - `pnpm run test:no-screen` - Run tests on devices without a screen (wraps Vitest with `xvfb-run`)
